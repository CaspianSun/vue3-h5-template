/**
 * @description 微信测试号
 * @author Caspian Sun
 */
import config from '@/config'
import jsSHA1 from 'jssha/dist/sha1'
import {
  getWeChatAccessToken,
  getWeChatJsApiTicket
} from '@/api/weChatOpenTest'
import { showFailToast } from 'vant'
import { getItem, setItem, clear } from '@/utils/storage'

enum LocalName {
  accessTokenName = 'WE_CHAT_ACCESS_TOKEN',
  accessTokenDueName = 'WE_CHAT_ACCESS_TOKEN_DUE',
  jsApiTicketName = 'WE_CHAT_JS_API_TICKET',
  jsApiTicketDueName = 'WE_CHAT_JS_API_TICKET_DUE'
}

class WeChatOpenTest {
  constructor() {
    if (
      !JSON.stringify(config.weChatOpenTest) ||
      !config.testAppId ||
      !config.testAppSecret
    ) {
      showFailToast('请正确配置微信测试号相关信息')
      throw new Error('请正确配置微信测试号相关信息')
    }
    this._init()
  }
  private _init() {
    if (config.weChatOpenTest) {
      this._setWeChatOpenTest()
    }
    return
  }
  private async _setWeChatOpenTest() {
    const { testAppId, testAppSecret } = config
    const timestamp = Math.round(new Date().getTime() / 1000).toString()
    const nonceStr = 'Wm3WZYTPz0wzccnW'
    const signature = await this._generateJsApiTicket(
      testAppId,
      testAppSecret,
      nonceStr,
      timestamp
    )
    console.log(testAppId, testAppSecret, nonceStr, timestamp)
    if (!signature) return
    window.wx.config({
      debug: false,
      appId: testAppId,
      timestamp: timestamp,
      nonceStr: nonceStr,
      signature: signature,
      jsApiList: ['checkJsApi', 'onMenuShareTimeline', 'onMenuShareAppMessage'],
      beta: false
    })
  }
  private async _generateJsApiTicket(
    testAppId: string,
    testAppSecret: string,
    nonceStr: string,
    timestamp: string
  ) {
    const url = window.location.href.split('#')[0]
    const accessToken = await this._getAccessToken(testAppId, testAppSecret)
    if (!accessToken) return
    const jsapi_ticket = await this._getJsApiTicket(accessToken)
    if (!jsapi_ticket) return
    const shaObj = new jsSHA1('SHA-1', 'TEXT', { encoding: 'UTF8' })
    console.log(url)
    shaObj.update(
      `jsapi_ticket=${jsapi_ticket}&noncestr=${nonceStr}&timestamp=${timestamp}&url=${url}`
    )
    const sha = shaObj.getHash('HEX')
    console.log('sha', sha)
    return sha
  }
  private async _getAccessToken(testAppId: string, testAppSecret: string) {
    let accessToken = getItem(LocalName.accessTokenName)
    const accessTokenDue = getItem(LocalName.accessTokenDueName)
    if (
      !accessTokenDue ||
      !accessToken ||
      new Date().getTime() > parseInt(accessTokenDue)
    ) {
      clear()
      const { access_token, expires_in } = await getWeChatAccessToken(
        testAppId,
        testAppSecret
      )
      if (access_token) {
        setItem(LocalName.accessTokenName, access_token)
        const dueTime = new Date().getTime() + expires_in * 1000
        setItem(LocalName.accessTokenDueName, dueTime.toString())
        accessToken = access_token
      } else {
        showFailToast('accessToken获取失败')
        throw new Error('accessToken获取失败')
      }
    }
    return accessToken
  }
  private async _getJsApiTicket(accessToken: string) {
    let jsApiTicket = getItem(LocalName.jsApiTicketName)
    const jsApiTicketDue = getItem(LocalName.jsApiTicketDueName)
    if (
      !jsApiTicketDue ||
      !jsApiTicket ||
      new Date().getTime() > parseInt(jsApiTicketDue)
    ) {
      const { errcode, ticket, expires_in } = await getWeChatJsApiTicket(
        accessToken
      )
      if (errcode == 0 && ticket) {
        setItem(LocalName.jsApiTicketName, ticket)
        const dueTime = new Date().getTime() + expires_in * 1000
        setItem(LocalName.jsApiTicketDueName, dueTime.toString())
        jsApiTicket = ticket
      } else {
        showFailToast('jsApiTicket获取失败')
        throw new Error('jsApiTicket获取失败')
      }
    }

    return jsApiTicket
  }
}
export default WeChatOpenTest
